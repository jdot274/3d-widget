{"version":3,"sources":["MeshBeveledBoxGeometry.js"],"names":["MeshBeveledBoxGeometry","width","height","depth","bevelSize","bevelSegments","parameters","geometry","THREE","BoxGeometry","sphere","SphereGeometry","cylinder","CylinderGeometry","geometries","push","hw","hh","hd","x","y","z","cornerSphere","clone","matrix","Matrix4","makeTranslation","applyMatrix4","edgeCylinder","length","scale","makeRotationZ","Math","PI","multiply","makeRotationX","mergedGeometry","BufferGeometryUtils","mergeBufferGeometries","copy","computeVertexNormals","BufferGeometry"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\n/**\n * Creates a box with beveled edges, similar to the macOS UI elements\n */\nexport class MeshBeveledBoxGeometry extends THREE.BufferGeometry {\n  constructor(width = 1, height = 1, depth = 1, bevelSize = 0.1, bevelSegments = 4) {\n    super();\n    \n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      bevelSize: bevelSize,\n      bevelSegments: bevelSegments\n    };\n    \n    // Create a properly beveled box with aesthetically pleasing proportions\n    const geometry = new THREE.BoxGeometry(\n      width - bevelSize * 2, \n      height - bevelSize * 2, \n      depth - bevelSize * 2, \n      bevelSegments, \n      bevelSegments, \n      bevelSegments\n    );\n    \n    // Create a sphere for smooth corners\n    const sphere = new THREE.SphereGeometry(\n      bevelSize, \n      bevelSegments * 2, \n      bevelSegments * 2\n    );\n    \n    // Create bevel cylinder for edges\n    const cylinder = new THREE.CylinderGeometry(\n      bevelSize, \n      bevelSize, \n      1, \n      bevelSegments * 2\n    );\n    \n    // Combine geometries\n    const geometries = [];\n    geometries.push(geometry);\n    \n    // Position corner spheres\n    const hw = (width - bevelSize * 2) / 2;\n    const hh = (height - bevelSize * 2) / 2;\n    const hd = (depth - bevelSize * 2) / 2;\n    \n    // Add 8 corners\n    for (let x = -1; x <= 1; x += 2) {\n      for (let y = -1; y <= 1; y += 2) {\n        for (let z = -1; z <= 1; z += 2) {\n          const cornerSphere = sphere.clone();\n          const matrix = new THREE.Matrix4().makeTranslation(\n            x * hw,\n            y * hh,\n            z * hd\n          );\n          cornerSphere.applyMatrix4(matrix);\n          geometries.push(cornerSphere);\n        }\n      }\n    }\n    \n    // Add 12 edge cylinders\n    // X-aligned edges\n    for (let y = -1; y <= 1; y += 2) {\n      for (let z = -1; z <= 1; z += 2) {\n        const edgeCylinder = cylinder.clone();\n        const length = width - bevelSize * 2;\n        edgeCylinder.scale(1, length, 1);\n        const matrix = new THREE.Matrix4()\n          .makeRotationZ(Math.PI / 2)\n          .multiply(new THREE.Matrix4().makeTranslation(\n            0,\n            y * hh,\n            z * hd\n          ));\n        edgeCylinder.applyMatrix4(matrix);\n        geometries.push(edgeCylinder);\n      }\n    }\n    \n    // Y-aligned edges\n    for (let x = -1; x <= 1; x += 2) {\n      for (let z = -1; z <= 1; z += 2) {\n        const edgeCylinder = cylinder.clone();\n        const length = height - bevelSize * 2;\n        edgeCylinder.scale(1, length, 1);\n        const matrix = new THREE.Matrix4()\n          .multiply(new THREE.Matrix4().makeTranslation(\n            x * hw,\n            0,\n            z * hd\n          ));\n        edgeCylinder.applyMatrix4(matrix);\n        geometries.push(edgeCylinder);\n      }\n    }\n    \n    // Z-aligned edges\n    for (let x = -1; x <= 1; x += 2) {\n      for (let y = -1; y <= 1; y += 2) {\n        const edgeCylinder = cylinder.clone();\n        const length = depth - bevelSize * 2;\n        edgeCylinder.scale(1, length, 1);\n        const matrix = new THREE.Matrix4()\n          .makeRotationX(Math.PI / 2)\n          .multiply(new THREE.Matrix4().makeTranslation(\n            x * hw,\n            y * hh,\n            0\n          ));\n        edgeCylinder.applyMatrix4(matrix);\n        geometries.push(edgeCylinder);\n      }\n    }\n    \n    // Merge all geometries into one\n    const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n    \n    // Copy the merged geometry attributes\n    this.copy(mergedGeometry);\n    \n    // Compute normals for smooth shading\n    this.computeVertexNormals();\n  }\n} "],"file":"MeshBeveledBoxGeometry.dev.js"}