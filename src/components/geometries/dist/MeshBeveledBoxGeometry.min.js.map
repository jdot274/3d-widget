{"version":3,"sources":["MeshBeveledBoxGeometry.js"],"names":["THREE","_interopRequireWildcard","require","_BufferGeometryUtils","MeshBeveledBoxGeometry","_this","width","arguments","length","undefined","height","depth","bevelSize","bevelSegments","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","parameters","geometry","BoxGeometry","sphere","SphereGeometry","cylinder","CylinderGeometry","geometries","push","hw","x","z","cornerSphere","clone","matrix","hh","hd","applyMatrix4","y","edgeCylinder","scale","Matrix4","Math","multiply","makeTranslation","makeRotationX","PI","mergedGeometry","BufferGeometryUtils","mergeBufferGeometries","computeVertexNormals","BufferGeometry"],"mappings":"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","file":"MeshBeveledBoxGeometry.min.js","sourcesContent":["import * as THREE from 'three';\nimport { BufferGeometryUtils } from 'three/examples/jsm/utils/BufferGeometryUtils.js';\n\n/**\n * Creates a box with beveled edges, similar to the macOS UI elements\n */\nexport class MeshBeveledBoxGeometry extends THREE.BufferGeometry {\n  constructor(width = 1, height = 1, depth = 1, bevelSize = 0.1, bevelSegments = 4) {\n    super();\n    \n    this.parameters = {\n      width: width,\n      height: height,\n      depth: depth,\n      bevelSize: bevelSize,\n      bevelSegments: bevelSegments\n    };\n    \n    // Create a properly beveled box with aesthetically pleasing proportions\n    const geometry = new THREE.BoxGeometry(\n      width - bevelSize * 2, \n      height - bevelSize * 2, \n      depth - bevelSize * 2, \n      bevelSegments, \n      bevelSegments, \n      bevelSegments\n    );\n    \n    // Create a sphere for smooth corners\n    const sphere = new THREE.SphereGeometry(\n      bevelSize, \n      bevelSegments * 2, \n      bevelSegments * 2\n    );\n    \n    // Create bevel cylinder for edges\n    const cylinder = new THREE.CylinderGeometry(\n      bevelSize, \n      bevelSize, \n      1, \n      bevelSegments * 2\n    );\n    \n    // Combine geometries\n    const geometries = [];\n    geometries.push(geometry);\n    \n    // Position corner spheres\n    const hw = (width - bevelSize * 2) / 2;\n    const hh = (height - bevelSize * 2) / 2;\n    const hd = (depth - bevelSize * 2) / 2;\n    \n    // Add 8 corners\n    for (let x = -1; x <= 1; x += 2) {\n      for (let y = -1; y <= 1; y += 2) {\n        for (let z = -1; z <= 1; z += 2) {\n          const cornerSphere = sphere.clone();\n          const matrix = new THREE.Matrix4().makeTranslation(\n            x * hw,\n            y * hh,\n            z * hd\n          );\n          cornerSphere.applyMatrix4(matrix);\n          geometries.push(cornerSphere);\n        }\n      }\n    }\n    \n    // Add 12 edge cylinders\n    // X-aligned edges\n    for (let y = -1; y <= 1; y += 2) {\n      for (let z = -1; z <= 1; z += 2) {\n        const edgeCylinder = cylinder.clone();\n        const length = width - bevelSize * 2;\n        edgeCylinder.scale(1, length, 1);\n        const matrix = new THREE.Matrix4()\n          .makeRotationZ(Math.PI / 2)\n          .multiply(new THREE.Matrix4().makeTranslation(\n            0,\n            y * hh,\n            z * hd\n          ));\n        edgeCylinder.applyMatrix4(matrix);\n        geometries.push(edgeCylinder);\n      }\n    }\n    \n    // Y-aligned edges\n    for (let x = -1; x <= 1; x += 2) {\n      for (let z = -1; z <= 1; z += 2) {\n        const edgeCylinder = cylinder.clone();\n        const length = height - bevelSize * 2;\n        edgeCylinder.scale(1, length, 1);\n        const matrix = new THREE.Matrix4()\n          .multiply(new THREE.Matrix4().makeTranslation(\n            x * hw,\n            0,\n            z * hd\n          ));\n        edgeCylinder.applyMatrix4(matrix);\n        geometries.push(edgeCylinder);\n      }\n    }\n    \n    // Z-aligned edges\n    for (let x = -1; x <= 1; x += 2) {\n      for (let y = -1; y <= 1; y += 2) {\n        const edgeCylinder = cylinder.clone();\n        const length = depth - bevelSize * 2;\n        edgeCylinder.scale(1, length, 1);\n        const matrix = new THREE.Matrix4()\n          .makeRotationX(Math.PI / 2)\n          .multiply(new THREE.Matrix4().makeTranslation(\n            x * hw,\n            y * hh,\n            0\n          ));\n        edgeCylinder.applyMatrix4(matrix);\n        geometries.push(edgeCylinder);\n      }\n    }\n    \n    // Merge all geometries into one\n    const mergedGeometry = BufferGeometryUtils.mergeBufferGeometries(geometries);\n    \n    // Copy the merged geometry attributes\n    this.copy(mergedGeometry);\n    \n    // Compute normals for smooth shading\n    this.computeVertexNormals();\n  }\n} "]}