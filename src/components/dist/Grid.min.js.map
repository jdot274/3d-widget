{"version":3,"sources":["Grid.js"],"names":["THREE","_interopRequireWildcard","require","_Chip","_interopRequireDefault","_sceneConfig","Grid","scene","_classCallCheck","this","chips","size","config","gridSize","container","Group","add","createGrid","row","col","chip","Chip","push","mesh","i","update","time","length","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","value","dispose","err","clear","remove"],"mappings":"4UAAA,IAAAA,MAAAC,wBAAAC,QAAA,UACAC,MAAAC,uBAAAF,QAAA,cACAG,aAAAD,uBAAAF,QAAA,0lCAEMI,gBACJ,SAAAA,EAAYC,GAAOC,gBAAAC,KAAAH,GACjBG,KAAKF,MAAQA,EACbE,KAAKC,MAAQ,GACbD,KAAKE,KAAOC,aAAAA,QAAOC,SAPvBJ,KAAAK,UAAA,IAAAd,MAAAe,MAWIN,KAAKF,MAAMS,IAAIP,KAAKK,WAGpBL,KAAKQ,uEAKL,IAAK,IAAIC,EAAM,EAAGA,EAAMT,KAAKE,KAAMO,IACjC,IAAK,IAAIC,EAAM,EAAGA,EAAMV,KAAKE,KAAMQ,IAAO,CAExC,IAAMC,EAAO,IAAIC,MAAAA,QAAKH,EAAKC,EAAKV,KAAKF,OACrCE,KAAKC,MAAMY,KAAKF,4CAKNG,GAxBhB,OAAAA,EAAYhB,SAAOa,oCACZb,GAEL,IAAKI,IAALa,EAAYZ,EAAAA,EAAAA,KAAAA,MAAAA,OAAOC,IAAnB,CA4BE,IAAMO,EAAOX,KAAKC,MAAMc,GAzBrBV,GAALM,EAAiBK,QACjBL,EAAKb,OAAUmB,oCAiCf,GAAIjB,KAAKC,OA3BE,EA2BOD,KAAKC,MA3BZiB,OAAA,CAAA,IAAAC,GAAA,EAAAC,GAAA,EAAAC,OAAAC,EAAA,IACX,IAAA,IAAAC,EAAAC,EAAAxB,KAAAC,MAAAwB,OAAAC,cAAAP,GAAAI,EAAAC,EAAAG,QAAAC,MAAAT,GAAA,EAAA,CAAA,IAAAR,EAAAY,EAAAM,MACKlB,GAAOA,EAAMF,SAChBE,EAAKmB,WAHI,MAAAC,GAAAX,GAAA,EAAAC,EAAAU,EAAA,QAAA,IAAAZ,GAAA,MAAAK,EAAA,QAAAA,EAAA,SAAA,QAAA,GAAAJ,EAAA,MAAAC,GAMPrB,KAAAC,MAAKA,wEAoCTD,KAAKgC,QACDhC,KAAKK,WACPL,KAAKF,MAAMmC,OAAOjC,KA7BfiB,6BAICN","file":"Grid.min.js","sourcesContent":["import * as THREE from 'three';\nimport Chip from './Chip.js';\nimport config from '../scene.config.json';\n\nclass Grid {\n  constructor(scene) {\n    this.scene = scene;\n    this.chips = [];\n    this.size = config.gridSize;\n    \n    // Create grid container for organization\n    this.container = new THREE.Group();\n    this.scene.add(this.container);\n    \n    // Create grid - just the chips, no debug visuals\n    this.createGrid();\n  }\n  \n  createGrid() {\n    // Create chips in a grid pattern\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Create the chip with explicit scene reference\n        const chip = new Chip(row, col, this.scene);\n        this.chips.push(chip);\n      }\n    }\n  }\n  \n  getChipFromMesh(mesh) {\n    return mesh.userData.chip;\n  }\n  \n  update(time) {\n    // Update each chip\n    for (let i = 0; i < this.chips.length; i++) {\n      const chip = this.chips[i];\n      if (chip && chip.update) {\n        chip.update(time);\n      }\n    }\n  }\n  \n  clear() {\n    // Remove and dispose all chips\n    if (this.chips && this.chips.length > 0) {\n      for (const chip of this.chips) {\n        if (chip && chip.dispose) {\n          chip.dispose();\n        }\n      }\n      this.chips = [];\n    }\n  }\n  \n  resize() {\n    // Handle grid resizing if needed\n  }\n  \n  dispose() {\n    this.clear();\n    if (this.container) {\n      this.scene.remove(this.container);\n    }\n  }\n}\n\nexport default Grid; "]}