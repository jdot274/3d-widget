{"version":3,"sources":["Grid.js"],"names":["Grid","scene","chips","size","config","gridSize","container","THREE","Group","add","createGrid","row","col","chip","Chip","push","mesh","userData","time","i","length","update","dispose","clear","remove"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;;;;;;;;;;;;;IAEMA,I;;;AACJ,gBAAYC,KAAZ,EAAmB;AAAA;;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,KAAL,GAAa,EAAb;AACA,SAAKC,IAAL,GAAYC,wBAAOC,QAAnB,CAHiB,CAKjB;;AACA,SAAKC,SAAL,GAAiB,IAAIC,KAAK,CAACC,KAAV,EAAjB;AACA,SAAKP,KAAL,CAAWQ,GAAX,CAAe,KAAKH,SAApB,EAPiB,CASjB;;AACA,SAAKI,UAAL;AACD;;;;iCAEY;AACX;AACA,WAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKR,IAA7B,EAAmCQ,GAAG,EAAtC,EAA0C;AACxC,aAAK,IAAIC,GAAG,GAAG,CAAf,EAAkBA,GAAG,GAAG,KAAKT,IAA7B,EAAmCS,GAAG,EAAtC,EAA0C;AACxC;AACA,cAAMC,IAAI,GAAG,IAAIC,gBAAJ,CAASH,GAAT,EAAcC,GAAd,EAAmB,KAAKX,KAAxB,CAAb;AACA,eAAKC,KAAL,CAAWa,IAAX,CAAgBF,IAAhB;AACD;AACF;AACF;;;oCAEeG,I,EAAM;AACpB,aAAOA,IAAI,CAACC,QAAL,CAAcJ,IAArB;AACD;;;2BAEMK,I,EAAM;AACX;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKjB,KAAL,CAAWkB,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,YAAMN,IAAI,GAAG,KAAKX,KAAL,CAAWiB,CAAX,CAAb;;AACA,YAAIN,IAAI,IAAIA,IAAI,CAACQ,MAAjB,EAAyB;AACvBR,UAAAA,IAAI,CAACQ,MAAL,CAAYH,IAAZ;AACD;AACF;AACF;;;4BAEO;AACN;AACA,UAAI,KAAKhB,KAAL,IAAc,KAAKA,KAAL,CAAWkB,MAAX,GAAoB,CAAtC,EAAyC;AAAA;AAAA;AAAA;;AAAA;AACvC,+BAAmB,KAAKlB,KAAxB,8HAA+B;AAAA,gBAApBW,IAAoB;;AAC7B,gBAAIA,IAAI,IAAIA,IAAI,CAACS,OAAjB,EAA0B;AACxBT,cAAAA,IAAI,CAACS,OAAL;AACD;AACF;AALsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMvC,aAAKpB,KAAL,GAAa,EAAb;AACD;AACF;;;6BAEQ,CACP;AACD;;;8BAES;AACR,WAAKqB,KAAL;;AACA,UAAI,KAAKjB,SAAT,EAAoB;AAClB,aAAKL,KAAL,CAAWuB,MAAX,CAAkB,KAAKlB,SAAvB;AACD;AACF;;;;;;eAGYN,I","sourcesContent":["import * as THREE from 'three';\nimport Chip from './Chip.js';\nimport config from '../scene.config.json';\n\nclass Grid {\n  constructor(scene) {\n    this.scene = scene;\n    this.chips = [];\n    this.size = config.gridSize;\n    \n    // Create grid container for organization\n    this.container = new THREE.Group();\n    this.scene.add(this.container);\n    \n    // Create grid - just the chips, no debug visuals\n    this.createGrid();\n  }\n  \n  createGrid() {\n    // Create chips in a grid pattern\n    for (let row = 0; row < this.size; row++) {\n      for (let col = 0; col < this.size; col++) {\n        // Create the chip with explicit scene reference\n        const chip = new Chip(row, col, this.scene);\n        this.chips.push(chip);\n      }\n    }\n  }\n  \n  getChipFromMesh(mesh) {\n    return mesh.userData.chip;\n  }\n  \n  update(time) {\n    // Update each chip\n    for (let i = 0; i < this.chips.length; i++) {\n      const chip = this.chips[i];\n      if (chip && chip.update) {\n        chip.update(time);\n      }\n    }\n  }\n  \n  clear() {\n    // Remove and dispose all chips\n    if (this.chips && this.chips.length > 0) {\n      for (const chip of this.chips) {\n        if (chip && chip.dispose) {\n          chip.dispose();\n        }\n      }\n      this.chips = [];\n    }\n  }\n  \n  resize() {\n    // Handle grid resizing if needed\n  }\n  \n  dispose() {\n    this.clear();\n    if (this.container) {\n      this.scene.remove(this.container);\n    }\n  }\n}\n\nexport default Grid; "],"file":"Grid.dev.js"}