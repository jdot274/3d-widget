{"version":3,"sources":["main.js"],"names":["animationFrameId","scene","camera","renderer","grid","clock","THREE","Clock","init","console","log","document","body","style","backgroundColor","documentElement","Scene","background","PerspectiveCamera","window","innerWidth","innerHeight","position","set","WebGLRenderer","alpha","antialias","premultipliedAlpha","preserveDrawingBuffer","setSize","setPixelRatio","Math","min","devicePixelRatio","setClearColor","setClearAlpha","app","getElementById","appendChild","domElement","addVisibilityCube","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","Grid","loadEnvironmentMap","envMap","environment","addEventListener","onWindowResize","animate","geometry","BoxGeometry","material","MeshStandardMaterial","color","emissive","emissiveIntensity","metalness","roughness","cube","Mesh","pmremGenerator","PMREMGenerator","compileEquirectangularShader","rgbeLoader","RGBELoader","Promise","resolve","reject","load","texture","mapping","EquirectangularReflectionMapping","undefined","error","fromEquirectangular","dispose","cubeRenderTarget","fromScene","aspect","updateProjectionMatrix","requestAnimationFrame","time","getElapsedTime","autoClear","clear","chips","chip","update","render","innerHTML"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport Grid from './components/Grid.js';\nimport config from './scene.config.json';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport '/styles/global.css';\n\n// App state\nlet animationFrameId = null;\nlet scene, camera, renderer, grid;\nlet clock = new THREE.Clock();\n\n// Initialize the app\nasync function init() {\n  console.log('Initializing app with simplified approach...');\n  \n  // Prepare DOM with transparent background\n  document.body.style.backgroundColor = 'transparent';\n  document.documentElement.style.backgroundColor = 'transparent';\n  \n  // Create scene with transparent background\n  scene = new THREE.Scene();\n  scene.background = null; // CRITICAL for transparency\n  \n  // Create camera - EXACTLY like silver-3d-rectangle\n  camera = new THREE.PerspectiveCamera(\n    45, // FOV\n    window.innerWidth / window.innerHeight, \n    0.1, \n    1000\n  );\n  camera.position.set(0, 0, 5);\n  \n  // Create renderer - EXACTLY like silver-3d-rectangle\n  renderer = new THREE.WebGLRenderer({ \n    alpha: true, \n    antialias: true,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  renderer.setClearColor(0x000000, 0);\n  renderer.setClearAlpha(0);\n  \n  // Add to DOM with transparent background\n  const app = document.getElementById('app');\n  app.style.backgroundColor = 'transparent';\n  app.appendChild(renderer.domElement);\n  \n  // Add a simple cube that will definitely be visible\n  addVisibilityCube();\n  \n  // Essential lighting - exactly like silver-3d-rectangle\n  const ambientLight = new THREE.AmbientLight(0xffffff, 1.5);\n  scene.add(ambientLight);\n  \n  // Add a strong directional light\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 2.0);\n  directionalLight.position.set(5, 5, 5);\n  scene.add(directionalLight);\n  \n  // Create grid with simplified approach\n  grid = new Grid(scene);\n  \n  // Load environment map - crucial for reflections\n  const envMap = await loadEnvironmentMap();\n  scene.environment = envMap;\n  \n  // Add event listeners\n  window.addEventListener('resize', onWindowResize);\n  \n  // Start animation loop\n  animate();\n  console.log('Animation loop started');\n}\n\n// Add a simple, obvious cube that will definitely be visible\nfunction addVisibilityCube() {\n  // Create a large, bright red cube that should be unmissable\n  const geometry = new THREE.BoxGeometry(1, 1, 1);\n  const material = new THREE.MeshStandardMaterial({ \n    color: 0xff0000,\n    emissive: 0xff0000,\n    emissiveIntensity: 0.5,\n    metalness: 0.7,\n    roughness: 0.2\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  cube.position.set(0, 0, 0);\n  scene.add(cube);\n  console.log('Visibility cube added');\n}\n\n// Load environment map for better reflections\nasync function loadEnvironmentMap() {\n  console.log('Loading environment map...');\n  const pmremGenerator = new THREE.PMREMGenerator(renderer);\n  pmremGenerator.compileEquirectangularShader();\n  \n  try {\n    // Use the exact same HDR as silver-3d-rectangle\n    const rgbeLoader = new RGBELoader();\n    const texture = await new Promise((resolve, reject) => {\n      rgbeLoader.load(\n        'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/potsdamer_platz_1k.hdr',\n        (texture) => {\n          console.log('HDR texture loaded successfully');\n          texture.mapping = THREE.EquirectangularReflectionMapping;\n          resolve(texture);\n        },\n        undefined,\n        (error) => {\n          console.error('Failed to load HDR texture:', error);\n          reject(error);\n        }\n      );\n    });\n    \n    const envMap = pmremGenerator.fromEquirectangular(texture).texture;\n    \n    // Clean up\n    texture.dispose();\n    pmremGenerator.dispose();\n    console.log('Environment map loaded');\n    return envMap;\n  } catch (error) {\n    console.error('Error loading environment map:', error);\n    // Create a basic environment map as fallback\n    const cubeRenderTarget = pmremGenerator.fromScene(new THREE.Scene());\n    const envMap = cubeRenderTarget.texture;\n    pmremGenerator.dispose();\n    cubeRenderTarget.dispose();\n    return envMap;\n  }\n}\n\n// Handle window resize\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Animation loop - EXACTLY like silver-3d-rectangle\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  \n  // Get time for animations\n  const time = clock.getElapsedTime();\n  \n  // CRITICAL: Proper transparency rendering sequence\n  renderer.setClearColor(0x000000, 0);\n  renderer.setClearAlpha(0);\n  renderer.autoClear = false;\n  renderer.clear(true, true, true);\n  \n  // Update grid with time parameter\n  if (grid && grid.chips) {\n    for (const chip of grid.chips) {\n      chip.update(time);\n    }\n  }\n  \n  // Render scene\n  renderer.render(scene, camera);\n}\n\n// Initialize the app\ninit().catch(error => {\n  console.error('Initialization error:', error);\n  // Add fallback rendering if initialization fails\n  const app = document.getElementById('app');\n  if (app) {\n    app.innerHTML = `<div style=\"color: red; padding: 20px; font-size: 24px; background: rgba(0,0,0,0.7);\">\n      Error initializing 3D scene. See console for details.\n    </div>`;\n  }\n}); "],"file":"main.dev.js"}