{"version":3,"sources":["postprocess.js"],"names":["THREE","_interopRequireWildcard","require","PostProcessor","renderer","scene","camera","_classCallCheck","this","setClearColor","setClearAlpha","autoClear","clear","render","width","height","setSize"],"mappings":"4UAAA,IAAAA,MAAAC,wBAAAC,QAAA,mgCAYMC,yBACJ,SAAAA,EAAYC,EAAUC,EAAOC,GAAQC,gBAAAC,KAAAL,GACnCK,KAAKJ,SAAWA,EAChBI,KAAKH,MAAQA,EACbG,KAAKF,OAASA,EAGdE,KAAKJ,SAASK,cAAc,EAAU,GACtCD,KAAKJ,SAASM,cAAc,GAnBhCF,KAAAJ,SAAAO,WAAA,wDAkGIH,KAAKJ,SAASK,cAAc,EAAU,GACtCD,KAAKJ,SAASM,cAAc,GAC5BF,KAAKJ,SAASO,WAAY,EAC1BH,KAAKJ,SAASQ,OAAM,GAAM,GAAM,GAGhCJ,KAAKJ,SAASS,OAAOL,KAAKH,MAAOG,KAAKF,uCAYjCQ,EAAOC,GAEZP,KAAKJ,SAASY,QAAQF,EAtBfC,wDAiDIZ","file":"postprocess.min.js","sourcesContent":["import * as THREE from 'three';\n// Import post-processing options for future use\n// import { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js';\n// import { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js';\n// import { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js';\n// import { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js';\n// import { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader.js';\n// import { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js';\n// import { SMAAPass } from 'three/examples/jsm/postprocessing/SMAAPass.js';\n// import config from './scene.config.json';\n\n// Direct render processor matching silver-3d-rectangle's approach\nclass PostProcessor {\n  constructor(renderer, scene, camera) {\n    this.renderer = renderer;\n    this.scene = scene;\n    this.camera = camera;\n    \n    // Set renderer properties for optimum transparency - match silver-3d-rectangle\n    this.renderer.setClearColor(0x000000, 0);\n    this.renderer.setClearAlpha(0);\n    this.renderer.autoClear = false;\n    \n    // Optional: uncomment to enable advanced post-processing\n    // this.setupComposer();\n  }\n  \n  /* Advanced post-processing setup - uncomment to use\n  setupComposer() {\n    // Create a render target with alpha channel for transparency\n    const renderTarget = new THREE.WebGLRenderTarget(\n      window.innerWidth * 1.5, // Higher resolution for better quality\n      window.innerHeight * 1.5, \n      {\n        minFilter: THREE.LinearFilter,\n        magFilter: THREE.LinearFilter,\n        format: THREE.RGBAFormat,\n        encoding: THREE.sRGBEncoding,\n        type: THREE.HalfFloatType,\n        stencilBuffer: false,\n        depthBuffer: true,\n        samples: 4, // Enable MSAA for better quality\n        alpha: true // Ensure alpha is supported\n      }\n    );\n    \n    // Create the effect composer with alpha support\n    this.composer = new EffectComposer(this.renderer, renderTarget);\n    \n    // Add render pass with transparent background\n    const renderPass = new RenderPass(this.scene, this.camera);\n    renderPass.clearAlpha = 0; // Important for transparency\n    renderPass.clearColor = new THREE.Color(0x000000);\n    renderPass.clear = true;\n    this.composer.addPass(renderPass);\n    \n    // Add bloom for glass highlights\n    const bloomPass = new UnrealBloomPass(\n      new THREE.Vector2(window.innerWidth, window.innerHeight),\n      0.3, // Subtle bloom intensity\n      0.5, // Radius\n      0.85 // Threshold\n    );\n    bloomPass.renderToScreen = false;\n    this.composer.addPass(bloomPass);\n    \n    // Use SMAA for better anti-aliasing quality\n    const smaaPass = new SMAAPass(window.innerWidth, window.innerHeight);\n    smaaPass.renderToScreen = false;\n    this.composer.addPass(smaaPass);\n    \n    // Add FXAA as additional anti-aliasing layer\n    const fxaaPass = new ShaderPass(FXAAShader);\n    fxaaPass.material.uniforms.resolution.value.set(\n      1 / (window.innerWidth * 1.5), \n      1 / (window.innerHeight * 1.5)\n    );\n    fxaaPass.renderToScreen = false;\n    this.composer.addPass(fxaaPass);\n    this.fxaaPass = fxaaPass;\n    \n    // Add gamma correction for better color accuracy\n    const gammaCorrectionPass = new ShaderPass(GammaCorrectionShader);\n    gammaCorrectionPass.renderToScreen = true;\n    this.composer.addPass(gammaCorrectionPass);\n    \n    // High quality tone mapping settings\n    this.renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    this.renderer.toneMappingExposure = 1.1; // Slightly increased exposure\n    this.renderer.outputEncoding = THREE.sRGBEncoding;\n    \n    // Ensure transparent background is preserved\n    this.renderer.setClearColor(0x000000, 0);\n    this.renderer.autoClear = false;\n  }\n  */\n  \n  render() {\n    // Direct rendering with transparency - exactly match silver-3d-rectangle\n    this.renderer.setClearColor(0x000000, 0);  // Transparent clear color\n    this.renderer.setClearAlpha(0);            // Fully transparent clear\n    this.renderer.autoClear = false;           // Manual clearing for consistency\n    this.renderer.clear(true, true, true);     // Clear color, depth, and stencil buffers\n    \n    // Silver-3d-rectangle style direct rendering\n    this.renderer.render(this.scene, this.camera);\n    \n    /* Uncomment to use post-processing instead of direct rendering\n    if (this.composer) {\n      this.renderer.setClearColor(0x000000, 0);\n      this.renderer.setClearAlpha(0);\n      this.renderer.clear(true, true, true);\n      this.composer.render();\n    }\n    */\n  }\n  \n  resize(width, height) {\n    // Update renderer size\n    this.renderer.setSize(width, height);\n    \n    /* Uncomment to update post-processor sizes\n    if (this.composer) {\n      this.composer.setSize(width, height);\n      \n      if (this.fxaaPass && this.fxaaPass.material) {\n        this.fxaaPass.material.uniforms.resolution.value.set(\n          1/(width * 1.5), \n          1/(height * 1.5)\n        );\n      }\n    }\n    */\n  }\n  \n  dispose() {\n    // Nothing to dispose in direct rendering mode\n    \n    /* Uncomment if using post-processing\n    if (this.composer) {\n      this.composer.dispose();\n    }\n    */\n  }\n}\n\nexport default PostProcessor; "]}