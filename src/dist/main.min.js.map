{"version":3,"sources":["main.js"],"names":["THREE","_interopRequireWildcard","require","_Grid","_interopRequireDefault","_sceneConfig","_RGBELoader","scene","camera","renderer","grid","animationFrameId","clock","Clock","init","app","ambientLight","directionalLight","envMap","regeneratorRuntime","async","_context","prev","next","console","log","document","body","style","backgroundColor","documentElement","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","set","WebGLRenderer","antialias","setSize","alpha","getElementById","premultipliedAlpha","setClearAlpha","AmbientLight","add","domElement","addVisibilityCube","awrap","sent","addEventListener","onWindowResize","animate","stop","BoxGeometry","MeshStandardMaterial","color","emissive","emissiveIntensity","metalness","roughness","cube","Mesh","geometry","material","loadEnvironmentMap","pmremGenerator","rgbeLoader","texture","cubeRenderTarget","_envMap","_context2","PMREMGenerator","RGBELoader","Promise","resolve","reject","load","mapping","EquirectangularReflectionMapping","undefined","error","fromEquirectangular","dispose","abrupt","t0","fromScene","setClearColor","autoClear","clear","chips","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","value","update","time","err","updateProjectionMatrix","innerHTML"],"mappings":"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","file":"main.min.js","sourcesContent":["import * as THREE from 'three';\nimport Grid from './components/Grid.js';\nimport config from './scene.config.json';\nimport { RGBELoader } from 'three/examples/jsm/loaders/RGBELoader.js';\nimport '/styles/global.css';\n\n// App state\nlet animationFrameId = null;\nlet scene, camera, renderer, grid;\nlet clock = new THREE.Clock();\n\n// Initialize the app\nasync function init() {\n  console.log('Initializing app with simplified approach...');\n  \n  // Prepare DOM with transparent background\n  document.body.style.backgroundColor = 'transparent';\n  document.documentElement.style.backgroundColor = 'transparent';\n  \n  // Create scene with transparent background\n  scene = new THREE.Scene();\n  scene.background = null; // CRITICAL for transparency\n  \n  // Create camera - EXACTLY like silver-3d-rectangle\n  camera = new THREE.PerspectiveCamera(\n    45, // FOV\n    window.innerWidth / window.innerHeight, \n    0.1, \n    1000\n  );\n  camera.position.set(0, 0, 5);\n  \n  // Create renderer - EXACTLY like silver-3d-rectangle\n  renderer = new THREE.WebGLRenderer({ \n    alpha: true, \n    antialias: true,\n    premultipliedAlpha: false,\n    preserveDrawingBuffer: true\n  });\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  renderer.setClearColor(0x000000, 0);\n  renderer.setClearAlpha(0);\n  \n  // Add to DOM with transparent background\n  const app = document.getElementById('app');\n  app.style.backgroundColor = 'transparent';\n  app.appendChild(renderer.domElement);\n  \n  // Add a simple cube that will definitely be visible\n  addVisibilityCube();\n  \n  // Essential lighting - exactly like silver-3d-rectangle\n  const ambientLight = new THREE.AmbientLight(0xffffff, 1.5);\n  scene.add(ambientLight);\n  \n  // Add a strong directional light\n  const directionalLight = new THREE.DirectionalLight(0xffffff, 2.0);\n  directionalLight.position.set(5, 5, 5);\n  scene.add(directionalLight);\n  \n  // Create grid with simplified approach\n  grid = new Grid(scene);\n  \n  // Load environment map - crucial for reflections\n  const envMap = await loadEnvironmentMap();\n  scene.environment = envMap;\n  \n  // Add event listeners\n  window.addEventListener('resize', onWindowResize);\n  \n  // Start animation loop\n  animate();\n  console.log('Animation loop started');\n}\n\n// Add a simple, obvious cube that will definitely be visible\nfunction addVisibilityCube() {\n  // Create a large, bright red cube that should be unmissable\n  const geometry = new THREE.BoxGeometry(1, 1, 1);\n  const material = new THREE.MeshStandardMaterial({ \n    color: 0xff0000,\n    emissive: 0xff0000,\n    emissiveIntensity: 0.5,\n    metalness: 0.7,\n    roughness: 0.2\n  });\n  const cube = new THREE.Mesh(geometry, material);\n  cube.position.set(0, 0, 0);\n  scene.add(cube);\n  console.log('Visibility cube added');\n}\n\n// Load environment map for better reflections\nasync function loadEnvironmentMap() {\n  console.log('Loading environment map...');\n  const pmremGenerator = new THREE.PMREMGenerator(renderer);\n  pmremGenerator.compileEquirectangularShader();\n  \n  try {\n    // Use the exact same HDR as silver-3d-rectangle\n    const rgbeLoader = new RGBELoader();\n    const texture = await new Promise((resolve, reject) => {\n      rgbeLoader.load(\n        'https://dl.polyhaven.org/file/ph-assets/HDRIs/hdr/1k/potsdamer_platz_1k.hdr',\n        (texture) => {\n          console.log('HDR texture loaded successfully');\n          texture.mapping = THREE.EquirectangularReflectionMapping;\n          resolve(texture);\n        },\n        undefined,\n        (error) => {\n          console.error('Failed to load HDR texture:', error);\n          reject(error);\n        }\n      );\n    });\n    \n    const envMap = pmremGenerator.fromEquirectangular(texture).texture;\n    \n    // Clean up\n    texture.dispose();\n    pmremGenerator.dispose();\n    console.log('Environment map loaded');\n    return envMap;\n  } catch (error) {\n    console.error('Error loading environment map:', error);\n    // Create a basic environment map as fallback\n    const cubeRenderTarget = pmremGenerator.fromScene(new THREE.Scene());\n    const envMap = cubeRenderTarget.texture;\n    pmremGenerator.dispose();\n    cubeRenderTarget.dispose();\n    return envMap;\n  }\n}\n\n// Handle window resize\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Animation loop - EXACTLY like silver-3d-rectangle\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  \n  // Get time for animations\n  const time = clock.getElapsedTime();\n  \n  // CRITICAL: Proper transparency rendering sequence\n  renderer.setClearColor(0x000000, 0);\n  renderer.setClearAlpha(0);\n  renderer.autoClear = false;\n  renderer.clear(true, true, true);\n  \n  // Update grid with time parameter\n  if (grid && grid.chips) {\n    for (const chip of grid.chips) {\n      chip.update(time);\n    }\n  }\n  \n  // Render scene\n  renderer.render(scene, camera);\n}\n\n// Initialize the app\ninit().catch(error => {\n  console.error('Initialization error:', error);\n  // Add fallback rendering if initialization fails\n  const app = document.getElementById('app');\n  if (app) {\n    app.innerHTML = `<div style=\"color: red; padding: 20px; font-size: 24px; background: rgba(0,0,0,0.7);\">\n      Error initializing 3D scene. See console for details.\n    </div>`;\n  }\n}); "]}