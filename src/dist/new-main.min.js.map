{"version":3,"sources":["new-main.js"],"names":["scene","camera","renderer","grid","THREE","_interopRequireWildcard","require","_Grid","_interopRequireDefault","_sceneConfig","envMap","animationFrameId","mouse","Vector2","raycaster","Raycaster","hoveredChip","clock","Clock","init","console","log","Scene","PerspectiveCamera","window","innerWidth","innerHeight","position","background","y","lookAt","alpha","precision","antialias","setClearColor","preserveDrawingBuffer","Math","min","devicePixelRatio","setSize","undefined","setPixelRatio","outputEncoding","sRGBEncoding","ACESFilmicToneMapping","toneMapping","createEnvironmentMap","toneMappingExposure","getElementById","appendChild","domElement","setupLighting","Grid","addEventListener","onWindowResize","onMouseMove","onClick","animate","PMREMGenerator","pmremGenerator","envTexture","createPremiumEnvironmentTexture","fromEquirectangular","texture","dispose","e","warn","canvas","width","document","createElement","height","ctx","getContext","gradient","addColorStop","createRadialGradient","fillRect","globalCompositeOperation","fillStyle","random","i","x","radius","arc","PI","CanvasTexture","aspect","clientX","updateProjectionMatrix","event","onHover","clientY","setFromCamera","intersects","intersectObjects","children","length","object","userData","chip","time","requestAnimationFrame","getElapsedTime","chips","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","next","done","value","update","err","camX","sin","camY","cos","z","setClearAlpha","clear","cleanup","removeEventListener","ambientLight","AmbientLight","keyLight","DirectionalLight","set","add","keyLight2","rimLight","PointLight","pointLight1","pointLight2"],"mappings":"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","file":"new-main.min.js","sourcesContent":["import * as THREE from 'three';\nimport Grid from './components/Grid.js';\nimport config from './scene.config.json';\n\n// Initialize variables\nlet scene, camera, renderer, grid;\nlet animationFrameId = null;\nlet mouse = new THREE.Vector2();\nlet raycaster = new THREE.Raycaster();\nlet hoveredChip = null;\nlet clock = new THREE.Clock();\nlet envMap;\n\n// Setup and start the 3D scene\nfunction init() {\n  console.log(\"Initializing 3D scene\");\n  \n  // Create scene with transparent background\n  scene = new THREE.Scene();\n  scene.background = null; // Crucial for true transparency\n  \n  // Create camera - premium perspective\n  camera = new THREE.PerspectiveCamera(\n    40, // Lower FOV for less distortion - premium look\n    window.innerWidth / window.innerHeight, \n    0.1, \n    1000\n  );\n  camera.position.z = 7; // Slightly closer for better detail\n  camera.position.y = 1.5; // Less elevation for more straight-on view\n  camera.lookAt(0, 0, 0);\n  \n  // Setup renderer with high quality settings for premium glass\n  renderer = new THREE.WebGLRenderer({\n    antialias: true,\n    alpha: true,\n    preserveDrawingBuffer: true,\n    precision: 'highp'\n  });\n  \n  // Configure renderer for premium style with transparency\n  renderer.setSize(window.innerWidth, window.innerHeight);\n  renderer.setClearColor(0x000000, 0); // Transparent background\n  renderer.setClearAlpha(0); // Crucial for transparency\n  renderer.setPixelRatio(Math.min(window.devicePixelRatio, 2));\n  \n  // Enable physically correct lighting\n  if (renderer.physicallyCorrectLights !== undefined) {\n    renderer.physicallyCorrectLights = true;\n  }\n  \n  // Set output encoding for proper color reproduction\n  if (THREE.sRGBEncoding !== undefined) {\n    renderer.outputEncoding = THREE.sRGBEncoding;\n  }\n  \n  // Add tone mapping with higher contrast - premium dark look\n  if (THREE.ACESFilmicToneMapping !== undefined) {\n    renderer.toneMapping = THREE.ACESFilmicToneMapping;\n    renderer.toneMappingExposure = 0.9; // Slightly darker for premium contrast\n  }\n  \n  // Create environment map for glass reflections\n  createEnvironmentMap();\n  \n  // Make renderer available to components\n  scene.renderer = renderer;\n  scene.envMap = envMap;\n  \n  // Add renderer to DOM\n  const app = document.getElementById('app');\n  app.appendChild(renderer.domElement);\n  \n  // Set up lighting for premium glass style with dark spheres\n  setupLighting();\n  \n  // Create grid of chips\n  grid = new Grid(scene);\n  console.log(\"Grid created:\", grid);\n  \n  // Add event listeners\n  window.addEventListener('resize', onWindowResize);\n  window.addEventListener('mousemove', onMouseMove);\n  window.addEventListener('click', onClick);\n  \n  // Start animation loop\n  animate();\n}\n\n// Create environment map optimized for premium glass\nfunction createEnvironmentMap() {\n  try {\n    // Create a PMREM generator\n    if (renderer && THREE.PMREMGenerator) {\n      const pmremGenerator = new THREE.PMREMGenerator(renderer);\n      pmremGenerator.compileEquirectangularShader();\n      \n      // Create a dark, premium environment for contrasting glass panels\n      const envTexture = createPremiumEnvironmentTexture();\n      \n      // Process the environment map for PBR materials\n      envMap = pmremGenerator.fromEquirectangular(envTexture).texture;\n      \n      // Clean up\n      pmremGenerator.dispose();\n      envTexture.dispose();\n    }\n  } catch (e) {\n    console.warn('Error creating environment map:', e);\n  }\n}\n\n// Create a premium environment texture that works with transparency\nfunction createPremiumEnvironmentTexture() {\n  const canvas = document.createElement('canvas');\n  canvas.width = 2048;\n  canvas.height = 1024;\n  \n  const ctx = canvas.getContext('2d');\n  \n  // Start with transparency for background\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n  \n  // Create a very subtle gradient that allows transparency\n  const gradient = ctx.createRadialGradient(\n    canvas.width/2, canvas.height/2, 0,\n    canvas.width/2, canvas.height/2, canvas.height * 0.8\n  );\n  \n  // Use very subtle colors that work with transparency\n  gradient.addColorStop(0, 'rgba(30, 30, 30, 0.1)');     // Very subtle dark center\n  gradient.addColorStop(0.3, 'rgba(20, 20, 20, 0.05)');  // Extremely subtle\n  gradient.addColorStop(0.6, 'rgba(10, 10, 10, 0.03)');  // Nearly invisible\n  gradient.addColorStop(1.0, 'rgba(0, 0, 0, 0)');        // Fully transparent at edges\n  \n  ctx.fillStyle = gradient;\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  \n  // Add subtle glow spots for glass reflections\n  ctx.globalCompositeOperation = 'lighter';\n  \n  // Add distant, subtle light sources but make them very subtle\n  for (let i = 0; i < 10; i++) { \n    const x = Math.random() * canvas.width;\n    const y = Math.random() * canvas.height;\n    const radius = 60 + Math.random() * 100;\n    const gradient = ctx.createRadialGradient(\n      x, y, 0,\n      x, y, radius\n    );\n    \n    gradient.addColorStop(0, 'rgba(255, 255, 255, 0.1)'); // Very subtle center\n    gradient.addColorStop(0.3, 'rgba(255, 255, 255, 0.03)'); // Even faster falloff\n    gradient.addColorStop(1, 'rgba(255, 255, 255, 0)');\n    \n    ctx.fillStyle = gradient;\n    ctx.beginPath();\n    ctx.arc(x, y, radius, 0, Math.PI * 2);\n    ctx.fill();\n  }\n  \n  // Reset composite operation\n  ctx.globalCompositeOperation = 'source-over';\n  \n  // Create a texture from the canvas\n  const texture = new THREE.CanvasTexture(canvas);\n  \n  // Configure for proper environment mapping\n  if (THREE.EquirectangularReflectionMapping) {\n    texture.mapping = THREE.EquirectangularReflectionMapping;\n  }\n  \n  return texture;\n}\n\n// Handle window resize\nfunction onWindowResize() {\n  camera.aspect = window.innerWidth / window.innerHeight;\n  camera.updateProjectionMatrix();\n  renderer.setSize(window.innerWidth, window.innerHeight);\n}\n\n// Handle mouse movement for hover effects\nfunction onMouseMove(event) {\n  // Calculate mouse position in normalized device coordinates (-1 to +1)\n  mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n  mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;\n  \n  // Update the raycaster\n  raycaster.setFromCamera(mouse, camera);\n  \n  // Check for intersections with chips\n  const intersects = raycaster.intersectObjects(scene.children, true);\n  \n  // Reset previously hovered chip\n  if (hoveredChip && (!intersects.length || intersects[0].object.userData.chip !== hoveredChip)) {\n    hoveredChip.onHover(false);\n    hoveredChip = null;\n  }\n  \n  // Set new hovered chip\n  if (intersects.length > 0) {\n    const chip = intersects[0].object.userData.chip;\n    if (chip && chip !== hoveredChip) {\n      hoveredChip = chip;\n      hoveredChip.onHover(true);\n    }\n  }\n}\n\n// Handle click events\nfunction onClick() {\n  if (hoveredChip) {\n    hoveredChip.onClick();\n  }\n}\n\n// Animation loop - modify for premium animation style\nfunction animate() {\n  animationFrameId = requestAnimationFrame(animate);\n  \n  // Get animation time\n  const time = clock.getElapsedTime();\n  \n  // Update grid\n  if (grid && grid.chips) {\n    for (const chip of grid.chips) {\n      chip.update(time);\n    }\n  }\n  \n  // Extremely subtle camera movement - premium UI has minimal movement\n  const camX = Math.sin(time * 0.07) * 0.03; // Very subtle x movement\n  const camY = Math.cos(time * 0.05) * 0.03 + 1.5; // Maintain near-stable position\n  camera.position.x = camX;\n  camera.position.y = camY;\n  camera.position.z = 7; // Keep z stable for premium look\n  camera.lookAt(0, 0, 0);\n  \n  // Clear with transparency\n  renderer.setClearColor(0x000000, 0);\n  renderer.setClearAlpha(0);\n  renderer.clear();\n  \n  // Render scene\n  renderer.render(scene, camera);\n}\n\n// Clean up resources\nfunction cleanup() {\n  if (animationFrameId) {\n    cancelAnimationFrame(animationFrameId);\n  }\n  \n  window.removeEventListener('resize', onWindowResize);\n  window.removeEventListener('mousemove', onMouseMove);\n  window.removeEventListener('click', onClick);\n  \n  if (grid) {\n    grid.dispose();\n  }\n  \n  if (renderer) {\n    renderer.dispose();\n  }\n  \n  if (envMap) {\n    envMap.dispose();\n  }\n}\n\n// Carefully designed lighting setup optimized for premium glassmorphism with transparency\nfunction setupLighting() {\n  // Subtle ambient light for premium glass with transparency\n  const ambientLight = new THREE.AmbientLight(0xffffff, 0.4); // Moderate ambient for transparency\n  scene.add(ambientLight);\n  \n  // Main key light - subtle highlights for glass edges with transparency\n  const keyLight = new THREE.DirectionalLight(0xffffff, 0.6); // Slightly reduced for transparency\n  keyLight.position.set(3, 5, 4);\n  scene.add(keyLight);\n  \n  // Secondary key light for balance\n  const keyLight2 = new THREE.DirectionalLight(0xffffff, 0.4);\n  keyLight2.position.set(-4, 3, 4);\n  scene.add(keyLight2);\n  \n  // Rim light - subtle edge definition\n  const rimLight = new THREE.DirectionalLight(0xffffff, 0.2); // Reduced for transparency\n  rimLight.position.set(0, -4, 2);\n  scene.add(rimLight);\n  \n  // Add subtle point lights for specular highlights on glass and spheres\n  const pointLight1 = new THREE.PointLight(0xffffff, 0.2, 10); // Reduced for transparency\n  pointLight1.position.set(2, 3, 4);\n  scene.add(pointLight1);\n  \n  const pointLight2 = new THREE.PointLight(0xffffff, 0.15, 8); // Reduced for transparency\n  pointLight2.position.set(-3, -2, 3);\n  scene.add(pointLight2);\n}\n\n// Initialize\ninit();\n\n// Handle cleanup when window is closed\nwindow.addEventListener('beforeunload', cleanup); "]}